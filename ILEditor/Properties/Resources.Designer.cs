//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ILEditor.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ILEditor.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap application_go {
            get {
                object obj = ResourceManager.GetObject("application_go", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ADDACC|Add Access Code|2
        ///ADDAJE|Add Autostart Job Entry|2
        ///ADDALRACNE|Add Alert Action Entry|2
        ///ADDALRD|Add Alert Description|2
        ///ADDALRSLTE|Add Alert Selection Entry|2
        ///ADDASPCPYD|Add ASP Copy Description|2
        ///ADDAUTLE|Add Authorization List Entry|2
        ///ADDBKP|Add Breakpoint|2
        ///ADDBNDDIRE|Add Binding Directory Entry|2
        ///ADDCADMRE|Add Cluster Administrative Domain Managed Resource Entry|2
        ///ADDCADNODE|Add Cluster Administrative Domain Node Entry|2
        ///ADDCCSCLT|Add Change Control Server Client|2
        ///ADDCFGLE|Add Configu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CL {
            get {
                return ResourceManager.GetString("CL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap compile {
            get {
                object obj = ResourceManager.GetObject("compile", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///
        ///&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot; /&gt;
        ///    &lt;title&gt;&lt;/title&gt;
        ///    &lt;style&gt;
        ///        body {
        ///            font-family: Arial, Helvetica, sans-serif;
        ///        }
        ///    &lt;/style&gt;
        ///&lt;/head&gt;
        ///&lt;body&gt;
        ///    &lt;h3&gt;Compiling a program&lt;/h3&gt;
        ///    &lt;p&gt;IlEditor will compile most ILE types by default. To compile a program&lt;/p&gt;
        ///    &lt;ul&gt;
        ///        &lt;li&gt;Use the Compile dropdown when the member is open, or&lt;/li&gt;
        ///        &lt;li&gt;Right click on a member in the member listi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Compiling {
            get {
                return ResourceManager.GetString("Compiling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to and|alternative to &amp;&amp; operator|6
        ///and_eq|alternative to &amp;= operator|6
        ///asm|insert an assembly instruction|6
        ///auto|declare a local variable, or we can let the compiler to deduce the type of the variable from the initialization.|6
        ///bitand|alternative to bitwise &amp; operator|6
        ///bitor|alternative to pipe operator|6
        ///bool|declare a boolean variable|6
        ///break|break out of a loop|6
        ///case|a block of code in a switch statement|6
        ///catch|handles exceptions from throw|6
        ///char|declare a character variable|6
        ///class|declare  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CPP {
            get {
                return ResourceManager.GetString("CPP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;SyntaxDefinition name=&quot;CLLE&quot;
        ///        xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///  &lt;Color name=&quot;Comment&quot; foreground=&quot;#F561E0&quot; /&gt;
        ///  &lt;Color name=&quot;String&quot; foreground=&quot;#F561E0&quot; /&gt;
        ///
        ///  &lt;!-- This is the main ruleset. --&gt;
        ///  &lt;RuleSet ignoreCase=&quot;true&quot;&gt;
        ///    &lt;Span color=&quot;Comment&quot; begin=&quot;//&quot; /&gt;
        ///
        ///    &lt;Span color=&quot;String&quot;  multiline=&quot;true&quot;&gt;
        ///      &lt;Begin&gt;&apos;&lt;/Begin&gt;
        ///      &lt;End&gt;&apos;&lt;/End&gt;
        ///    &lt;/Span&gt;
        ///
        ///    &lt;Span color=&quot;Comment&quot; multiline=&quot;true&quot;&gt;
        ///      &lt;Begin&gt;/\*&lt;/Begin&gt;
        ///      &lt;End&gt;\*/&lt;/End [rest of string was truncated]&quot;;.
        /// </summary>
        public static string darkCL {
            get {
                return ResourceManager.GetString("darkCL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;SyntaxDefinition name=&quot;COBOL&quot;
        ///        xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///  &lt;Color name=&quot;Comment&quot; foreground=&quot;Green&quot; /&gt;
        ///
        ///  &lt;RuleSet ignoreCase=&quot;true&quot;&gt;
        ///
        ///    &lt;Span color=&quot;Comment&quot; begin=&quot;/&quot; /&gt;
        ///    &lt;Span color=&quot;Comment&quot; begin=&quot;\*&quot; /&gt;
        ///    
        ///    &lt;Keywords foreground=&quot;#829BE5&quot;&gt;
        ///      &lt;Word&gt;access&lt;/Word&gt;
        ///      &lt;Word&gt;acquire&lt;/Word&gt;
        ///      &lt;Word&gt;actual&lt;/Word&gt;
        ///      &lt;Word&gt;address&lt;/Word&gt;
        ///      &lt;Word&gt;advancing&lt;/Word&gt;
        ///      &lt;Word&gt;after&lt;/Word&gt;
        ///      &lt;Word&gt;all&lt;/Word&gt;
        ///      &lt;W [rest of string was truncated]&quot;;.
        /// </summary>
        public static string darkCOBOL {
            get {
                return ResourceManager.GetString("darkCOBOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
        ///&lt;!-- syntaxdefinition for C/C++ 2001 by Andrea Paatz and Mike Krueger --&gt;
        ///&lt;!-- converted to AvalonEdit format by Siegfried Pammer in 2010 --&gt;
        ///&lt;SyntaxDefinition name=&quot;C++&quot; extensions=&quot;.c;.h;.cc;.cpp;.hpp&quot; xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///	&lt;Color name=&quot;Comment&quot; foreground=&quot;Green&quot; /&gt;
        ///	&lt;Color name=&quot;Character&quot; foreground=&quot;Fuchsia&quot; /&gt;
        ///	&lt;Color name=&quot;String&quot; foreground=&quot;LightGreen&quot; /&gt;
        ///	&lt;Color name=&quot;Preprocessor&quot; foreground=&quot;Green&quot; /&gt;
        ///	&lt;Color name=&quot;Punc [rest of string was truncated]&quot;;.
        /// </summary>
        public static string darkCPP {
            get {
                return ResourceManager.GetString("darkCPP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;SyntaxDefinition name=&quot;RPGLE&quot;
        ///        xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///  &lt;Color name=&quot;Comment&quot; foreground=&quot;#4FB548&quot; /&gt;
        ///  &lt;Color name=&quot;String&quot; foreground=&quot;#4FB548&quot; /&gt;
        ///  &lt;Color name=&quot;ESQL&quot; foreground=&quot;LightBlue&quot; /&gt;
        ///
        ///  &lt;!-- This is the main ruleset. --&gt;
        ///  &lt;RuleSet ignoreCase=&quot;true&quot;&gt;
        ///    &lt;Span color=&quot;Comment&quot; begin=&quot;//&quot; /&gt;
        ///    &lt;Span color=&quot;Comment&quot; begin=&quot;\*\*&quot; /&gt;
        ///    
        ///    &lt;Span color=&quot;String&quot;&gt;
        ///      &lt;Begin&gt;&apos;&lt;/Begin&gt;
        ///      &lt;End&gt;&apos;&lt;/End&gt;
        ///    &lt;/Span&gt;
        ///    
        ///    &lt;Spa [rest of string was truncated]&quot;;.
        /// </summary>
        public static string darkRPG {
            get {
                return ResourceManager.GetString("darkRPG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
        ///&lt;SyntaxDefinition name=&quot;sql&quot; extensions=&quot;.sql&quot;
        ///                  xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///  &lt;Color name=&quot;String&quot; foreground=&quot;#FF71EC&quot; exampleText=&quot;string text = &amp;quot;Hello, World!&amp;quot;&quot;/&gt;
        ///  &lt;Color name=&quot;String2&quot; foreground=&quot;#FF71EC&quot; exampleText=&quot;string text = &amp;quot;Hello, World!&amp;quot;&quot;/&gt;
        ///  &lt;Color name=&quot;Comment&quot; foreground=&quot;#FF71EC&quot; exampleText=&quot;string text = &amp;quot;Hello, World!&amp;quot;&quot;/&gt;
        ///  &lt;Color name=&quot;Punctuation&quot; foreground=&quot;Orange&quot; ex [rest of string was truncated]&quot;;.
        /// </summary>
        public static string darkSQL {
            get {
                return ResourceManager.GetString("darkSQL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap edit {
            get {
                object obj = ResourceManager.GetObject("edit", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap edit1 {
            get {
                object obj = ResourceManager.GetObject("edit1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap filedelete {
            get {
                object obj = ResourceManager.GetObject("filedelete", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap firewall {
            get {
                object obj = ResourceManager.GetObject("firewall", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap folder {
            get {
                object obj = ResourceManager.GetObject("folder", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///
        ///&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot; /&gt;
        ///    &lt;title&gt;&lt;/title&gt;
        ///    &lt;style&gt;
        ///        body {
        ///            font-family: Arial, Helvetica, sans-serif;
        ///        }
        ///    &lt;/style&gt;
        ///&lt;/head&gt;
        ///&lt;body&gt;
        ///    &lt;h3&gt;Something not working?&lt;/h3&gt;
        ///    &lt;p&gt;Are you seeing this error message?&lt;/p&gt;
        ///    &lt;img width=&quot;100%&quot; src=&quot;https://i.imgur.com/qA7Dhqt.png&quot; /&gt;
        ///    &lt;p&gt;This may be because the Windows Firewall is blocking either:&lt;/p&gt;
        ///    &lt;ul&gt;
        ///        &lt;li&gt;ftp.exe ( [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FTP {
            get {
                return ResourceManager.GetString("FTP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///
        ///&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot; /&gt;
        ///    &lt;title&gt;&lt;/title&gt;
        ///    &lt;style&gt;
        ///        body {
        ///            font-family: Arial, Helvetica, sans-serif;
        ///        }
        ///    &lt;/style&gt;
        ///&lt;/head&gt;
        ///&lt;body&gt;
        ///    &lt;h3&gt;Library List in ILEditor&lt;/h3&gt;
        ///    &lt;p&gt;The library list will apply to every command sent from ILEditor, including all compiles. To open the library list editor:&lt;/p&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Select the Tools dropdown&lt;/li&gt;
        ///        &lt;li&gt;Select Librar [rest of string was truncated]&quot;;.
        /// </summary>
        public static string LibraryList {
            get {
                return ResourceManager.GetString("LibraryList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;SyntaxDefinition name=&quot;CLLE&quot;
        ///        xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///  &lt;Color name=&quot;Comment&quot; foreground=&quot;Green&quot; /&gt;
        ///  &lt;Color name=&quot;String&quot; foreground=&quot;Green&quot; /&gt;
        ///
        ///  &lt;!-- This is the main ruleset. --&gt;
        ///  &lt;RuleSet ignoreCase=&quot;true&quot;&gt;
        ///    &lt;Span color=&quot;Comment&quot; begin=&quot;//&quot; /&gt;
        ///
        ///    &lt;Span color=&quot;String&quot;  multiline=&quot;true&quot;&gt;
        ///      &lt;Begin&gt;&apos;&lt;/Begin&gt;
        ///      &lt;End&gt;&apos;&lt;/End&gt;
        ///    &lt;/Span&gt;
        ///
        ///    &lt;Span color=&quot;Comment&quot; multiline=&quot;true&quot;&gt;
        ///      &lt;Begin&gt;/\*&lt;/Begin&gt;
        ///      &lt;End&gt;\*/&lt;/End&gt;
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string lightCL {
            get {
                return ResourceManager.GetString("lightCL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;SyntaxDefinition name=&quot;COBOL&quot;
        ///        xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///  &lt;Color name=&quot;Comment&quot; foreground=&quot;Green&quot; /&gt;
        ///
        ///  &lt;RuleSet ignoreCase=&quot;true&quot;&gt;
        ///
        ///    &lt;Span color=&quot;Comment&quot; begin=&quot;/&quot; /&gt;
        ///    &lt;Span color=&quot;Comment&quot; begin=&quot;\*&quot; /&gt;
        ///    
        ///    &lt;Keywords foreground=&quot;DarkBlue&quot;&gt;
        ///      &lt;Word&gt;access&lt;/Word&gt;
        ///      &lt;Word&gt;acquire&lt;/Word&gt;
        ///      &lt;Word&gt;actual&lt;/Word&gt;
        ///      &lt;Word&gt;address&lt;/Word&gt;
        ///      &lt;Word&gt;advancing&lt;/Word&gt;
        ///      &lt;Word&gt;after&lt;/Word&gt;
        ///      &lt;Word&gt;all&lt;/Word&gt;
        ///      &lt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string lightCOBOL {
            get {
                return ResourceManager.GetString("lightCOBOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
        ///&lt;!-- syntaxdefinition for C/C++ 2001 by Andrea Paatz and Mike Krueger --&gt;
        ///&lt;!-- converted to AvalonEdit format by Siegfried Pammer in 2010 --&gt;
        ///&lt;SyntaxDefinition name=&quot;C++&quot; extensions=&quot;.c;.h;.cc;.cpp;.hpp&quot; xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///	&lt;Color name=&quot;Comment&quot; foreground=&quot;Green&quot; /&gt;
        ///	&lt;Color name=&quot;Character&quot; foreground=&quot;Fuchsia&quot; /&gt;
        ///	&lt;Color name=&quot;String&quot; foreground=&quot;Fuchsia&quot; /&gt;
        ///	&lt;Color name=&quot;Preprocessor&quot; foreground=&quot;Green&quot; /&gt;
        ///	&lt;Color name=&quot;Punctua [rest of string was truncated]&quot;;.
        /// </summary>
        public static string lightCPP {
            get {
                return ResourceManager.GetString("lightCPP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;SyntaxDefinition name=&quot;RPGLE&quot;
        ///        xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///  &lt;Color name=&quot;Comment&quot; foreground=&quot;Green&quot; /&gt;
        ///  &lt;Color name=&quot;String&quot; foreground=&quot;Green&quot; /&gt;
        ///  &lt;Color name=&quot;ESQL&quot; foreground=&quot;Blue&quot; /&gt;
        ///
        ///  &lt;!-- This is the main ruleset. --&gt;
        ///  &lt;RuleSet ignoreCase=&quot;true&quot;&gt;
        ///    &lt;Span color=&quot;Comment&quot; begin=&quot;//&quot; /&gt;
        ///    &lt;Span color=&quot;Comment&quot; begin=&quot;\*\*&quot; /&gt;
        ///    
        ///    &lt;Span color=&quot;String&quot;&gt;
        ///      &lt;Begin&gt;&apos;&lt;/Begin&gt;
        ///      &lt;End&gt;&apos;&lt;/End&gt;
        ///    &lt;/Span&gt;
        ///    
        ///    &lt;Span color=&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string lightRPG {
            get {
                return ResourceManager.GetString("lightRPG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
        ///&lt;SyntaxDefinition name=&quot;sql&quot; extensions=&quot;.sql&quot;
        ///                  xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///  &lt;Color name=&quot;String&quot; foreground=&quot;Olive&quot; exampleText=&quot;string text = &amp;quot;Hello, World!&amp;quot;&quot;/&gt;
        ///  &lt;Color name=&quot;String2&quot; foreground=&quot;#993&quot; exampleText=&quot;string text = &amp;quot;Hello, World!&amp;quot;&quot;/&gt;
        ///  &lt;Color name=&quot;Comment&quot; foreground=&quot;Green&quot; exampleText=&quot;string text = &amp;quot;Hello, World!&amp;quot;&quot;/&gt;
        ///  &lt;Color name=&quot;Punctuation&quot; foreground=&quot;Red&quot; exampleText= [rest of string was truncated]&quot;;.
        /// </summary>
        public static string lightSQL {
            get {
                return ResourceManager.GetString("lightSQL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap notebook {
            get {
                object obj = ResourceManager.GetObject("notebook", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///
        ///&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot; /&gt;
        ///    &lt;title&gt;&lt;/title&gt;
        ///    &lt;style&gt;
        ///        body {
        ///            font-family: Arial, Helvetica, sans-serif;
        ///        }
        ///    &lt;/style&gt;
        ///&lt;/head&gt;
        ///&lt;body&gt;
        ///    &lt;h3&gt;Offline Mode in ILEditor&lt;/h3&gt;
        ///    &lt;p&gt;As of ILEditor 1.1.1.0, there has been an offline mode available so you can still work on your code while you&apos;re on the go.&lt;/p&gt;
        ///    &lt;p&gt;To use offline mode, start ILEditor and tick &apos;Offline Mode&apos; before sel [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OfflineMode {
            get {
                return ResourceManager.GetString("OfflineMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///
        ///&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot; /&gt;
        ///    &lt;title&gt;&lt;/title&gt;
        ///    &lt;style&gt;
        ///        body {
        ///            font-family: Arial, Helvetica, sans-serif;
        ///        }
        ///    &lt;/style&gt;
        ///&lt;/head&gt;
        ///&lt;body&gt;
        ///    &lt;h3&gt;Opening a specific member&lt;/h3&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Select the File dropdown&lt;/li&gt;
        ///        &lt;li&gt;Select Open&lt;/li&gt;
        ///        &lt;li&gt;Select Member&lt;/li&gt;
        ///    &lt;/ol&gt;
        ///    &lt;p&gt;Or use the Ctrl+O shortcut to open the same window.&lt;/p&gt;
        ///
        ///    &lt;h3&gt;Opening a me [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OpenMember {
            get {
                return ResourceManager.GetString("OpenMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap refresh {
            get {
                object obj = ResourceManager.GetObject("refresh", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to %ABS|Absolute Value of Expression|1
        ///%ADDR|Get Address of Variable|1
        ///%ALLOC|Allocate Storage|1
        ///%BITAND|Bitwise AND Operation|1
        ///%BITNOT|Invert Bits|1
        ///%BITOR|Bitwise OR Operation|1
        ///%BITXOR|Bitwise Exclusive-OR Operation|1
        ///%CHAR|Convert to Character Data|1
        ///%CHECK|Check Characters|1
        ///%CHECKR|Check Reverse|1
        ///%DATE|Convert to Date|1
        ///%DAYS|Number of Days|1
        ///%DEC|Convert to Packed Decimal Format|1
        ///%DECH|Convert to Packed Decimal Format with Half Adjust|1
        ///%DECPOS|Get Number of Decimal Positions|1
        ///%DIFF|D [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RPG {
            get {
                return ResourceManager.GetString("RPG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap save {
            get {
                object obj = ResourceManager.GetObject("save", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap script_add {
            get {
                object obj = ResourceManager.GetObject("script_add", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap script_go {
            get {
                object obj = ResourceManager.GetObject("script_go", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap search {
            get {
                object obj = ResourceManager.GetObject("search", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap zoom_in {
            get {
                object obj = ResourceManager.GetObject("zoom-in", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap zoom_out {
            get {
                object obj = ResourceManager.GetObject("zoom-out", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
